// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// Source: src/proto/AI.proto
/* eslint-disable */

import type { ByteSource } from "protoscript";
import { BinaryReader, BinaryWriter } from "protoscript";
import { JSONrequest, PBrequest } from "twirpscript";
// This is the minimum version supported by the current runtime.
// If this line fails typechecking, breaking changes have been introduced and this
// file needs to be regenerated by running `npx twirpscript`.
export { MIN_SUPPORTED_VERSION_0_0_56 } from "twirpscript";
import type { ClientConfiguration } from "twirpscript";
import * as protoscript from "protoscript";

//========================================//
//                 Types                  //
//========================================//

export interface ChatGPTResquest {
  content: string;
  contactId: string;
}

export interface ChatGPTResponse {
  reply: string;
}

export interface ResetRequest {
  contactId: string;
}

//========================================//
//           AI Protobuf Client           //
//========================================//

export async function getChatGPTReply(
  chatGPTResquest: ChatGPTResquest,
  config?: ClientConfiguration
): Promise<ChatGPTResponse> {
  const response = await PBrequest(
    "/AI/getChatGPTReply",
    ChatGPTResquest.encode(chatGPTResquest),
    config
  );
  return ChatGPTResponse.decode(response);
}

export async function resetChatOption(
  resetRequest: ResetRequest,
  config?: ClientConfiguration
): Promise<protoscript.Empty> {
  const response = await PBrequest(
    "/AI/resetChatOption",
    ResetRequest.encode(resetRequest),
    config
  );
  return protoscript.Empty.decode(response);
}

//========================================//
//             AI JSON Client             //
//========================================//

export async function getChatGPTReplyJSON(
  chatGPTResquest: ChatGPTResquest,
  config?: ClientConfiguration
): Promise<ChatGPTResponse> {
  const response = await JSONrequest(
    "/AI/getChatGPTReply",
    ChatGPTResquestJSON.encode(chatGPTResquest),
    config
  );
  return ChatGPTResponseJSON.decode(response);
}

export async function resetChatOptionJSON(
  resetRequest: ResetRequest,
  config?: ClientConfiguration
): Promise<protoscript.Empty> {
  const response = await JSONrequest(
    "/AI/resetChatOption",
    ResetRequestJSON.encode(resetRequest),
    config
  );
  return protoscript.EmptyJSON.decode(response);
}

//========================================//
//                   AI                   //
//========================================//

export interface AI<Context = unknown> {
  getChatGPTReply: (
    chatGPTResquest: ChatGPTResquest,
    context: Context
  ) => Promise<ChatGPTResponse> | ChatGPTResponse;
  resetChatOption: (
    resetRequest: ResetRequest,
    context: Context
  ) => Promise<protoscript.Empty> | protoscript.Empty;
}

export function createAI<Context>(service: AI<Context>) {
  return {
    name: "AI",
    methods: {
      getChatGPTReply: {
        name: "getChatGPTReply",
        handler: service.getChatGPTReply,
        input: { protobuf: ChatGPTResquest, json: ChatGPTResquestJSON },
        output: { protobuf: ChatGPTResponse, json: ChatGPTResponseJSON },
      },
      resetChatOption: {
        name: "resetChatOption",
        handler: service.resetChatOption,
        input: { protobuf: ResetRequest, json: ResetRequestJSON },
        output: { protobuf: protoscript.Empty, json: protoscript.EmptyJSON },
      },
    },
  } as const;
}

//========================================//
//        Protobuf Encode / Decode        //
//========================================//

export const ChatGPTResquest = {
  /**
   * Serializes ChatGPTResquest to protobuf.
   */
  encode: function (msg: Partial<ChatGPTResquest>): Uint8Array {
    return ChatGPTResquest._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes ChatGPTResquest from protobuf.
   */
  decode: function (bytes: ByteSource): ChatGPTResquest {
    return ChatGPTResquest._readMessage(
      ChatGPTResquest.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes ChatGPTResquest with all fields set to their default value.
   */
  initialize: function (): ChatGPTResquest {
    return {
      content: "",
      contactId: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<ChatGPTResquest>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.content) {
      writer.writeString(1, msg.content);
    }
    if (msg.contactId) {
      writer.writeString(2, msg.contactId);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ChatGPTResquest,
    reader: BinaryReader
  ): ChatGPTResquest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.content = reader.readString();
          break;
        }
        case 2: {
          msg.contactId = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const ChatGPTResponse = {
  /**
   * Serializes ChatGPTResponse to protobuf.
   */
  encode: function (msg: Partial<ChatGPTResponse>): Uint8Array {
    return ChatGPTResponse._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes ChatGPTResponse from protobuf.
   */
  decode: function (bytes: ByteSource): ChatGPTResponse {
    return ChatGPTResponse._readMessage(
      ChatGPTResponse.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes ChatGPTResponse with all fields set to their default value.
   */
  initialize: function (): ChatGPTResponse {
    return {
      reply: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<ChatGPTResponse>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.reply) {
      writer.writeString(1, msg.reply);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ChatGPTResponse,
    reader: BinaryReader
  ): ChatGPTResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.reply = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const ResetRequest = {
  /**
   * Serializes ResetRequest to protobuf.
   */
  encode: function (msg: Partial<ResetRequest>): Uint8Array {
    return ResetRequest._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes ResetRequest from protobuf.
   */
  decode: function (bytes: ByteSource): ResetRequest {
    return ResetRequest._readMessage(
      ResetRequest.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes ResetRequest with all fields set to their default value.
   */
  initialize: function (): ResetRequest {
    return {
      contactId: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<ResetRequest>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.contactId) {
      writer.writeString(1, msg.contactId);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ResetRequest,
    reader: BinaryReader
  ): ResetRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.contactId = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

//========================================//
//          JSON Encode / Decode          //
//========================================//

export const ChatGPTResquestJSON = {
  /**
   * Serializes ChatGPTResquest to JSON.
   */
  encode: function (msg: Partial<ChatGPTResquest>): string {
    return JSON.stringify(ChatGPTResquestJSON._writeMessage(msg));
  },

  /**
   * Deserializes ChatGPTResquest from JSON.
   */
  decode: function (json: string): ChatGPTResquest {
    return ChatGPTResquestJSON._readMessage(
      ChatGPTResquestJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes ChatGPTResquest with all fields set to their default value.
   */
  initialize: function (): ChatGPTResquest {
    return {
      content: "",
      contactId: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<ChatGPTResquest>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.content) {
      json["content"] = msg.content;
    }
    if (msg.contactId) {
      json["contactId"] = msg.contactId;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: ChatGPTResquest, json: any): ChatGPTResquest {
    const _content_ = json["content"];
    if (_content_) {
      msg.content = _content_;
    }
    const _contactId_ = json["contactId"];
    if (_contactId_) {
      msg.contactId = _contactId_;
    }
    return msg;
  },
};

export const ChatGPTResponseJSON = {
  /**
   * Serializes ChatGPTResponse to JSON.
   */
  encode: function (msg: Partial<ChatGPTResponse>): string {
    return JSON.stringify(ChatGPTResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes ChatGPTResponse from JSON.
   */
  decode: function (json: string): ChatGPTResponse {
    return ChatGPTResponseJSON._readMessage(
      ChatGPTResponseJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes ChatGPTResponse with all fields set to their default value.
   */
  initialize: function (): ChatGPTResponse {
    return {
      reply: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<ChatGPTResponse>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.reply) {
      json["reply"] = msg.reply;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: ChatGPTResponse, json: any): ChatGPTResponse {
    const _reply_ = json["reply"];
    if (_reply_) {
      msg.reply = _reply_;
    }
    return msg;
  },
};

export const ResetRequestJSON = {
  /**
   * Serializes ResetRequest to JSON.
   */
  encode: function (msg: Partial<ResetRequest>): string {
    return JSON.stringify(ResetRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes ResetRequest from JSON.
   */
  decode: function (json: string): ResetRequest {
    return ResetRequestJSON._readMessage(
      ResetRequestJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes ResetRequest with all fields set to their default value.
   */
  initialize: function (): ResetRequest {
    return {
      contactId: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<ResetRequest>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.contactId) {
      json["contactId"] = msg.contactId;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: ResetRequest, json: any): ResetRequest {
    const _contactId_ = json["contactId"];
    if (_contactId_) {
      msg.contactId = _contactId_;
    }
    return msg;
  },
};
